// AUTOGENERATED CODE
// Generated: 20230904 19:01:46 UTC
// Method count: 62

// ReSharper disable All
using System;
using System.Numerics;
using System.Threading;
using System.Threading.Tasks;
using LiteNetLib;
using LiteNetLib.Utils;
using LibreLancer.World;

namespace LibreLancer.Net.Protocol
{
    public interface IClientPlayer
    {
        void UpdateBaselinePrices(BaselinePrice[] prices);
        void CallThorn(string script, int mainObject);
        void SpawnObject(int id, ObjectName name, string affiliation, Vector3 position, Quaternion orientation, NetShipLoadout loadout);
        void SpawnPlayer(string system, int objective, Vector3 position, Quaternion orientation);
        void UpdateEffects(int id, SpawnedEffect[] effects);
        void SpawnProjectiles(ProjectileSpawn[] projectiles);
        void UpdateAnimations(bool systemObject, int id, NetCmpAnimation[] animations);
        void UpdateReputations(NetReputation[] reps);
        void UpdateInventory(long credits, ulong shipworth, NetShipLoadout ship);
        void UpdateSlotCount(int slot, int count);
        void DeleteSlot(int slot);
        void SpawnSolar(SolarInfo[] solars);
        void OnConsoleMessage(string text);
        void SpawnDebris(int id, GameObjectKind kind, string archetype, string part, Vector3 position, Quaternion orientation, float mass);
        void SpawnMissile(int id, bool playSound, uint equip, Vector3 position, Quaternion orientation);
        void DestroyMissile(int id, bool explode);
        void BaseEnter(string _base, int objective, string[] rtcs, NewsArticle[] news, SoldGood[] goods, NetSoldShip[] ships);
        void UpdateRTCs(string[] rtcs);
        void ObjectiveUpdate(int objective);
        void Killed();
        void DespawnObject(int id);
        void PlaySound(string sound);
        void PlayMusic(string music, float fade);
        void DestroyPart(byte idtype, int id, string part);
        void RunMissionDialog(NetDlgLine[] lines);
        void StartJumpTunnel();
        void StartTradelane();
        void TradelaneDisrupted();
        void EndTradelane();
        void UpdateFormation(NetFormation formation);
        void TradelaneActivate(uint id, bool left);
        void TradelaneDeactivate(uint id, bool left);
        void MarkImportant(int objId);
        void ReceiveChatMessage(ChatCategory category, string player, string message);
        void PopupOpen(int title, int contents, string id);
        void OnPlayerJoin(int id, string name);
        void OnPlayerLeave(int id, string name);
    }

    public interface IServerPlayer
    {
        void Launch();
        void RTCComplete(string rtc);
        void LineSpoken(uint hash);
        void OnLocationEnter(string _base, string room);
        void RequestCharacterDB();
        Task<bool> SelectCharacter(int index);
        Task<bool> DeleteCharacter(int index);
        Task<bool> CreateNewCharacter(string name, int index);
        Task<bool> PurchaseGood(string item, int count);
        Task<bool> SellGood(int id, int count);
        Task<ShipPackageInfo> GetShipPackage(int package);
        Task<ShipPurchaseStatus> PurchaseShip(int package, MountId[] mountedPlayer, MountId[] mountedPackage, SellCount[] sellPlayer, SellCount[] sellPackage);
        void RequestDock(string nickname);
        void FireProjectiles(ProjectileSpawn[] projectiles);
        void FireMissiles(MissileFireCmd[] missiles);
        Task<bool> Unmount(string hardpoint);
        Task<bool> Mount(int id);
        void ClosedPopup(string id);
        void StoryNPCSelect(string name, string room, string _base);
        void RTCMissionAccepted();
        void RTCMissionRejected();
        void Respawn();
        void ChatMessage(ChatCategory category, string message);
        void EnterFormation(int ship);
        void LeaveFormation();
    }

    public partial class RemoteServerPlayer : IServerPlayer
    {
        int retSeq;

        public void Launch()
        {
            SendPacket(new ServerPacket_Launch() {
            }, 0);
        }

        public void RTCComplete(string rtc)
        {
            SendPacket(new ServerPacket_RTCComplete() {
                rtc = rtc,
            }, 0);
        }

        public void LineSpoken(uint hash)
        {
            SendPacket(new ServerPacket_LineSpoken() {
                hash = hash,
            }, 0);
        }

        public void OnLocationEnter(string _base, string room)
        {
            SendPacket(new ServerPacket_OnLocationEnter() {
                _base = _base,
                room = room,
            }, 0);
        }

        public void RequestCharacterDB()
        {
            SendPacket(new ServerPacket_RequestCharacterDB() {
            }, 0);
        }

        public Task<bool> SelectCharacter(int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_SelectCharacter() {
                Sequence = __SEQ,
                index = index,
            }, 0);
            return complete.Task;
        }

        public Task<bool> DeleteCharacter(int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_DeleteCharacter() {
                Sequence = __SEQ,
                index = index,
            }, 0);
            return complete.Task;
        }

        public Task<bool> CreateNewCharacter(string name, int index)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_CreateNewCharacter() {
                Sequence = __SEQ,
                name = name,
                index = index,
            }, 0);
            return complete.Task;
        }

        public Task<bool> PurchaseGood(string item, int count)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_PurchaseGood() {
                Sequence = __SEQ,
                item = item,
                count = count,
            }, 0);
            return complete.Task;
        }

        public Task<bool> SellGood(int id, int count)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_SellGood() {
                Sequence = __SEQ,
                id = id,
                count = count,
            }, 0);
            return complete.Task;
        }

        public Task<ShipPackageInfo> GetShipPackage(int package)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_ShipPackageInfo(__SEQ);
            SendPacket(new ServerPacket_GetShipPackage() {
                Sequence = __SEQ,
                package = package,
            }, 0);
            return complete.Task;
        }

        public Task<ShipPurchaseStatus> PurchaseShip(int package, MountId[] mountedPlayer, MountId[] mountedPackage, SellCount[] sellPlayer, SellCount[] sellPackage)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_ShipPurchaseStatus(__SEQ);
            SendPacket(new ServerPacket_PurchaseShip() {
                Sequence = __SEQ,
                package = package,
                mountedPlayer = mountedPlayer,
                mountedPackage = mountedPackage,
                sellPlayer = sellPlayer,
                sellPackage = sellPackage,
            }, 0);
            return complete.Task;
        }

        public void RequestDock(string nickname)
        {
            SendPacket(new ServerPacket_RequestDock() {
                nickname = nickname,
            }, 0);
        }

        public void FireProjectiles(ProjectileSpawn[] projectiles)
        {
            SendPacket(new ServerPacket_FireProjectiles() {
                projectiles = projectiles,
            }, 0);
        }

        public void FireMissiles(MissileFireCmd[] missiles)
        {
            SendPacket(new ServerPacket_FireMissiles() {
                missiles = missiles,
            }, 0);
        }

        public Task<bool> Unmount(string hardpoint)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_Unmount() {
                Sequence = __SEQ,
                hardpoint = hardpoint,
            }, 0);
            return complete.Task;
        }

        public Task<bool> Mount(int id)
        {
            var __SEQ = Interlocked.Increment(ref retSeq);
            var complete = ResponseHandler.GetCompletionSource_bool(__SEQ);
            SendPacket(new ServerPacket_Mount() {
                Sequence = __SEQ,
                id = id,
            }, 0);
            return complete.Task;
        }

        public void ClosedPopup(string id)
        {
            SendPacket(new ServerPacket_ClosedPopup() {
                id = id,
            }, 0);
        }

        public void StoryNPCSelect(string name, string room, string _base)
        {
            SendPacket(new ServerPacket_StoryNPCSelect() {
                name = name,
                room = room,
                _base = _base,
            }, 0);
        }

        public void RTCMissionAccepted()
        {
            SendPacket(new ServerPacket_RTCMissionAccepted() {
            }, 0);
        }

        public void RTCMissionRejected()
        {
            SendPacket(new ServerPacket_RTCMissionRejected() {
            }, 0);
        }

        public void Respawn()
        {
            SendPacket(new ServerPacket_Respawn() {
            }, 0);
        }

        public void ChatMessage(ChatCategory category, string message)
        {
            SendPacket(new ServerPacket_ChatMessage() {
                category = category,
                message = message,
            }, 0);
        }

        public void EnterFormation(int ship)
        {
            SendPacket(new ServerPacket_EnterFormation() {
                ship = ship,
            }, 0);
        }

        public void LeaveFormation()
        {
            SendPacket(new ServerPacket_LeaveFormation() {
            }, 0);
        }

    }
    public partial class RemoteClientPlayer : IClientPlayer
    {
        int retSeq;

        public void UpdateBaselinePrices(BaselinePrice[] prices)
        {
            SendPacket(new ClientPacket_UpdateBaselinePrices() {
                prices = prices,
            }, 0);
        }

        public void CallThorn(string script, int mainObject)
        {
            SendPacket(new ClientPacket_CallThorn() {
                script = script,
                mainObject = mainObject,
            }, 0);
        }

        public void SpawnObject(int id, ObjectName name, string affiliation, Vector3 position, Quaternion orientation, NetShipLoadout loadout)
        {
            SendPacket(new ClientPacket_SpawnObject() {
                id = id,
                name = name,
                affiliation = affiliation,
                position = position,
                orientation = orientation,
                loadout = loadout,
            }, 0);
        }

        public void SpawnPlayer(string system, int objective, Vector3 position, Quaternion orientation)
        {
            SendPacket(new ClientPacket_SpawnPlayer() {
                system = system,
                objective = objective,
                position = position,
                orientation = orientation,
            }, 0);
        }

        public void UpdateEffects(int id, SpawnedEffect[] effects)
        {
            SendPacket(new ClientPacket_UpdateEffects() {
                id = id,
                effects = effects,
            }, 0);
        }

        public void SpawnProjectiles(ProjectileSpawn[] projectiles)
        {
            SendPacket(new ClientPacket_SpawnProjectiles() {
                projectiles = projectiles,
            }, 0);
        }

        public void UpdateAnimations(bool systemObject, int id, NetCmpAnimation[] animations)
        {
            SendPacket(new ClientPacket_UpdateAnimations() {
                systemObject = systemObject,
                id = id,
                animations = animations,
            }, 0);
        }

        public void UpdateReputations(NetReputation[] reps)
        {
            SendPacket(new ClientPacket_UpdateReputations() {
                reps = reps,
            }, 0);
        }

        public void UpdateInventory(long credits, ulong shipworth, NetShipLoadout ship)
        {
            SendPacket(new ClientPacket_UpdateInventory() {
                credits = credits,
                shipworth = shipworth,
                ship = ship,
            }, 0);
        }

        public void UpdateSlotCount(int slot, int count)
        {
            SendPacket(new ClientPacket_UpdateSlotCount() {
                slot = slot,
                count = count,
            }, 0);
        }

        public void DeleteSlot(int slot)
        {
            SendPacket(new ClientPacket_DeleteSlot() {
                slot = slot,
            }, 0);
        }

        public void SpawnSolar(SolarInfo[] solars)
        {
            SendPacket(new ClientPacket_SpawnSolar() {
                solars = solars,
            }, 0);
        }

        public void OnConsoleMessage(string text)
        {
            SendPacket(new ClientPacket_OnConsoleMessage() {
                text = text,
            }, 0);
        }

        public void SpawnDebris(int id, GameObjectKind kind, string archetype, string part, Vector3 position, Quaternion orientation, float mass)
        {
            SendPacket(new ClientPacket_SpawnDebris() {
                id = id,
                kind = kind,
                archetype = archetype,
                part = part,
                position = position,
                orientation = orientation,
                mass = mass,
            }, 0);
        }

        public void SpawnMissile(int id, bool playSound, uint equip, Vector3 position, Quaternion orientation)
        {
            SendPacket(new ClientPacket_SpawnMissile() {
                id = id,
                playSound = playSound,
                equip = equip,
                position = position,
                orientation = orientation,
            }, 0);
        }

        public void DestroyMissile(int id, bool explode)
        {
            SendPacket(new ClientPacket_DestroyMissile() {
                id = id,
                explode = explode,
            }, 0);
        }

        public void BaseEnter(string _base, int objective, string[] rtcs, NewsArticle[] news, SoldGood[] goods, NetSoldShip[] ships)
        {
            SendPacket(new ClientPacket_BaseEnter() {
                _base = _base,
                objective = objective,
                rtcs = rtcs,
                news = news,
                goods = goods,
                ships = ships,
            }, 0);
        }

        public void UpdateRTCs(string[] rtcs)
        {
            SendPacket(new ClientPacket_UpdateRTCs() {
                rtcs = rtcs,
            }, 0);
        }

        public void ObjectiveUpdate(int objective)
        {
            SendPacket(new ClientPacket_ObjectiveUpdate() {
                objective = objective,
            }, 0);
        }

        public void Killed()
        {
            SendPacket(new ClientPacket_Killed() {
            }, 0);
        }

        public void DespawnObject(int id)
        {
            SendPacket(new ClientPacket_DespawnObject() {
                id = id,
            }, 0);
        }

        public void PlaySound(string sound)
        {
            SendPacket(new ClientPacket_PlaySound() {
                sound = sound,
            }, 0);
        }

        public void PlayMusic(string music, float fade)
        {
            SendPacket(new ClientPacket_PlayMusic() {
                music = music,
                fade = fade,
            }, 0);
        }

        public void DestroyPart(byte idtype, int id, string part)
        {
            SendPacket(new ClientPacket_DestroyPart() {
                idtype = idtype,
                id = id,
                part = part,
            }, 0);
        }

        public void RunMissionDialog(NetDlgLine[] lines)
        {
            SendPacket(new ClientPacket_RunMissionDialog() {
                lines = lines,
            }, 0);
        }

        public void StartJumpTunnel()
        {
            SendPacket(new ClientPacket_StartJumpTunnel() {
            }, 0);
        }

        public void StartTradelane()
        {
            SendPacket(new ClientPacket_StartTradelane() {
            }, 0);
        }

        public void TradelaneDisrupted()
        {
            SendPacket(new ClientPacket_TradelaneDisrupted() {
            }, 0);
        }

        public void EndTradelane()
        {
            SendPacket(new ClientPacket_EndTradelane() {
            }, 0);
        }

        public void UpdateFormation(NetFormation formation)
        {
            SendPacket(new ClientPacket_UpdateFormation() {
                formation = formation,
            }, 0);
        }

        public void TradelaneActivate(uint id, bool left)
        {
            SendPacket(new ClientPacket_TradelaneActivate() {
                id = id,
                left = left,
            }, 1);
        }

        public void TradelaneDeactivate(uint id, bool left)
        {
            SendPacket(new ClientPacket_TradelaneDeactivate() {
                id = id,
                left = left,
            }, 1);
        }

        public void MarkImportant(int objId)
        {
            SendPacket(new ClientPacket_MarkImportant() {
                objId = objId,
            }, 0);
        }

        public void ReceiveChatMessage(ChatCategory category, string player, string message)
        {
            SendPacket(new ClientPacket_ReceiveChatMessage() {
                category = category,
                player = player,
                message = message,
            }, 0);
        }

        public void PopupOpen(int title, int contents, string id)
        {
            SendPacket(new ClientPacket_PopupOpen() {
                title = title,
                contents = contents,
                id = id,
            }, 0);
        }

        public void OnPlayerJoin(int id, string name)
        {
            SendPacket(new ClientPacket_OnPlayerJoin() {
                id = id,
                name = name,
            }, 0);
        }

        public void OnPlayerLeave(int id, string name)
        {
            SendPacket(new ClientPacket_OnPlayerLeave() {
                id = id,
                name = name,
            }, 0);
        }

    }

    class ServerPacket_Launch : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_Launch();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ServerPacket_RTCComplete : IPacket
    {
        public string rtc;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_RTCComplete();
            _packet.rtc = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(rtc);
        }
    }

    class ServerPacket_LineSpoken : IPacket
    {
        public uint hash;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_LineSpoken();
            _packet.hash = inPacket.GetUInt();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(hash);
        }
    }

    class ServerPacket_OnLocationEnter : IPacket
    {
        public string _base;
        public string room;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_OnLocationEnter();
            _packet._base = inPacket.GetString();
            _packet.room = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(_base);
            outPacket.Put(room);
        }
    }

    class ServerPacket_RequestCharacterDB : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_RequestCharacterDB();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ServerPacket_SelectCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_SelectCharacter();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.index = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(index);
        }
    }

    class ServerPacket_DeleteCharacter : IPacket
    {
        public int Sequence;
        public int index;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_DeleteCharacter();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.index = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(index);
        }
    }

    class ServerPacket_CreateNewCharacter : IPacket
    {
        public int Sequence;
        public string name;
        public int index;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_CreateNewCharacter();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.name = inPacket.GetString();
            _packet.index = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.Put(name);
            outPacket.PutVariableInt32(index);
        }
    }

    class ServerPacket_PurchaseGood : IPacket
    {
        public int Sequence;
        public string item;
        public int count;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_PurchaseGood();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.item = inPacket.GetString();
            _packet.count = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.Put(item);
            outPacket.PutVariableInt32(count);
        }
    }

    class ServerPacket_SellGood : IPacket
    {
        public int Sequence;
        public int id;
        public int count;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_SellGood();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.id = inPacket.GetVariableInt32();
            _packet.count = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(id);
            outPacket.PutVariableInt32(count);
        }
    }

    class ServerPacket_GetShipPackage : IPacket
    {
        public int Sequence;
        public int package;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_GetShipPackage();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.package = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(package);
        }
    }

    class ServerPacket_PurchaseShip : IPacket
    {
        public int Sequence;
        public int package;
        public MountId[] mountedPlayer;
        public MountId[] mountedPackage;
        public SellCount[] sellPlayer;
        public SellCount[] sellPackage;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_PurchaseShip();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.package = inPacket.GetVariableInt32();
            uint __len_mountedPlayer = inPacket.GetVariableUInt32();
            if (__len_mountedPlayer > 0) {
                _packet.mountedPlayer = new MountId[(int)(__len_mountedPlayer - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.mountedPlayer.Length; _ARRIDX++)
                    _packet.mountedPlayer[_ARRIDX] = MountId.Read(inPacket);
            }
            uint __len_mountedPackage = inPacket.GetVariableUInt32();
            if (__len_mountedPackage > 0) {
                _packet.mountedPackage = new MountId[(int)(__len_mountedPackage - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.mountedPackage.Length; _ARRIDX++)
                    _packet.mountedPackage[_ARRIDX] = MountId.Read(inPacket);
            }
            uint __len_sellPlayer = inPacket.GetVariableUInt32();
            if (__len_sellPlayer > 0) {
                _packet.sellPlayer = new SellCount[(int)(__len_sellPlayer - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.sellPlayer.Length; _ARRIDX++)
                    _packet.sellPlayer[_ARRIDX] = SellCount.Read(inPacket);
            }
            uint __len_sellPackage = inPacket.GetVariableUInt32();
            if (__len_sellPackage > 0) {
                _packet.sellPackage = new SellCount[(int)(__len_sellPackage - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.sellPackage.Length; _ARRIDX++)
                    _packet.sellPackage[_ARRIDX] = SellCount.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(package);
            if (mountedPlayer != null) {
                outPacket.PutVariableUInt32((uint)(mountedPlayer.Length + 1));
                foreach(var _element in mountedPlayer)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (mountedPackage != null) {
                outPacket.PutVariableUInt32((uint)(mountedPackage.Length + 1));
                foreach(var _element in mountedPackage)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (sellPlayer != null) {
                outPacket.PutVariableUInt32((uint)(sellPlayer.Length + 1));
                foreach(var _element in sellPlayer)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (sellPackage != null) {
                outPacket.PutVariableUInt32((uint)(sellPackage.Length + 1));
                foreach(var _element in sellPackage)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ServerPacket_RequestDock : IPacket
    {
        public string nickname;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_RequestDock();
            _packet.nickname = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(nickname);
        }
    }

    class ServerPacket_FireProjectiles : IPacket
    {
        public ProjectileSpawn[] projectiles;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_FireProjectiles();
            uint __len_projectiles = inPacket.GetVariableUInt32();
            if (__len_projectiles > 0) {
                _packet.projectiles = new ProjectileSpawn[(int)(__len_projectiles - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.projectiles.Length; _ARRIDX++)
                    _packet.projectiles[_ARRIDX] = ProjectileSpawn.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (projectiles != null) {
                outPacket.PutVariableUInt32((uint)(projectiles.Length + 1));
                foreach(var _element in projectiles)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ServerPacket_FireMissiles : IPacket
    {
        public MissileFireCmd[] missiles;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_FireMissiles();
            uint __len_missiles = inPacket.GetVariableUInt32();
            if (__len_missiles > 0) {
                _packet.missiles = new MissileFireCmd[(int)(__len_missiles - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.missiles.Length; _ARRIDX++)
                    _packet.missiles[_ARRIDX] = MissileFireCmd.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (missiles != null) {
                outPacket.PutVariableUInt32((uint)(missiles.Length + 1));
                foreach(var _element in missiles)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ServerPacket_Unmount : IPacket
    {
        public int Sequence;
        public string hardpoint;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_Unmount();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.hardpoint = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.Put(hardpoint);
        }
    }

    class ServerPacket_Mount : IPacket
    {
        public int Sequence;
        public int id;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_Mount();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.id = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32(id);
        }
    }

    class ServerPacket_ClosedPopup : IPacket
    {
        public string id;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_ClosedPopup();
            _packet.id = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(id);
        }
    }

    class ServerPacket_StoryNPCSelect : IPacket
    {
        public string name;
        public string room;
        public string _base;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_StoryNPCSelect();
            _packet.name = inPacket.GetString();
            _packet.room = inPacket.GetString();
            _packet._base = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(name);
            outPacket.Put(room);
            outPacket.Put(_base);
        }
    }

    class ServerPacket_RTCMissionAccepted : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_RTCMissionAccepted();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ServerPacket_RTCMissionRejected : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_RTCMissionRejected();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ServerPacket_Respawn : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_Respawn();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ServerPacket_ChatMessage : IPacket
    {
        public ChatCategory category;
        public string message;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_ChatMessage();
            _packet.category = (ChatCategory)inPacket.GetVariableInt32();
            _packet.message = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32((int)category);
            outPacket.Put(message);
        }
    }

    class ServerPacket_EnterFormation : IPacket
    {
        public int ship;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_EnterFormation();
            _packet.ship = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(ship);
        }
    }

    class ServerPacket_LeaveFormation : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ServerPacket_LeaveFormation();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_UpdateBaselinePrices : IPacket
    {
        public BaselinePrice[] prices;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateBaselinePrices();
            uint __len_prices = inPacket.GetVariableUInt32();
            if (__len_prices > 0) {
                _packet.prices = new BaselinePrice[(int)(__len_prices - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.prices.Length; _ARRIDX++)
                    _packet.prices[_ARRIDX] = BaselinePrice.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (prices != null) {
                outPacket.PutVariableUInt32((uint)(prices.Length + 1));
                foreach(var _element in prices)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_CallThorn : IPacket
    {
        public string script;
        public int mainObject;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_CallThorn();
            _packet.script = inPacket.GetString();
            _packet.mainObject = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(script);
            outPacket.PutVariableInt32(mainObject);
        }
    }

    class ClientPacket_SpawnObject : IPacket
    {
        public int id;
        public ObjectName name;
        public string affiliation;
        public Vector3 position;
        public Quaternion orientation;
        public NetShipLoadout loadout;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnObject();
            _packet.id = inPacket.GetVariableInt32();
            _packet.name = inPacket.GetObjectName();
            _packet.affiliation = inPacket.GetString();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            _packet.loadout = NetShipLoadout.Read(inPacket);
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.Put(name);
            outPacket.Put(affiliation);
            outPacket.Put(position);
            outPacket.Put(orientation);
            loadout.Put(outPacket);
        }
    }

    class ClientPacket_SpawnPlayer : IPacket
    {
        public string system;
        public int objective;
        public Vector3 position;
        public Quaternion orientation;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnPlayer();
            _packet.system = inPacket.GetString();
            _packet.objective = inPacket.GetVariableInt32();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(system);
            outPacket.PutVariableInt32(objective);
            outPacket.Put(position);
            outPacket.Put(orientation);
        }
    }

    class ClientPacket_UpdateEffects : IPacket
    {
        public int id;
        public SpawnedEffect[] effects;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateEffects();
            _packet.id = inPacket.GetVariableInt32();
            uint __len_effects = inPacket.GetVariableUInt32();
            if (__len_effects > 0) {
                _packet.effects = new SpawnedEffect[(int)(__len_effects - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.effects.Length; _ARRIDX++)
                    _packet.effects[_ARRIDX] = SpawnedEffect.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            if (effects != null) {
                outPacket.PutVariableUInt32((uint)(effects.Length + 1));
                foreach(var _element in effects)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_SpawnProjectiles : IPacket
    {
        public ProjectileSpawn[] projectiles;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnProjectiles();
            uint __len_projectiles = inPacket.GetVariableUInt32();
            if (__len_projectiles > 0) {
                _packet.projectiles = new ProjectileSpawn[(int)(__len_projectiles - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.projectiles.Length; _ARRIDX++)
                    _packet.projectiles[_ARRIDX] = ProjectileSpawn.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (projectiles != null) {
                outPacket.PutVariableUInt32((uint)(projectiles.Length + 1));
                foreach(var _element in projectiles)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_UpdateAnimations : IPacket
    {
        public bool systemObject;
        public int id;
        public NetCmpAnimation[] animations;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateAnimations();
            _packet.systemObject = inPacket.GetBool();
            _packet.id = inPacket.GetVariableInt32();
            uint __len_animations = inPacket.GetVariableUInt32();
            if (__len_animations > 0) {
                _packet.animations = new NetCmpAnimation[(int)(__len_animations - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.animations.Length; _ARRIDX++)
                    _packet.animations[_ARRIDX] = NetCmpAnimation.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(systemObject);
            outPacket.PutVariableInt32(id);
            if (animations != null) {
                outPacket.PutVariableUInt32((uint)(animations.Length + 1));
                foreach(var _element in animations)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_UpdateReputations : IPacket
    {
        public NetReputation[] reps;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateReputations();
            uint __len_reps = inPacket.GetVariableUInt32();
            if (__len_reps > 0) {
                _packet.reps = new NetReputation[(int)(__len_reps - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.reps.Length; _ARRIDX++)
                    _packet.reps[_ARRIDX] = NetReputation.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (reps != null) {
                outPacket.PutVariableUInt32((uint)(reps.Length + 1));
                foreach(var _element in reps)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_UpdateInventory : IPacket
    {
        public long credits;
        public ulong shipworth;
        public NetShipLoadout ship;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateInventory();
            _packet.credits = inPacket.GetVariableInt64();
            _packet.shipworth = inPacket.GetVariableUInt64();
            _packet.ship = NetShipLoadout.Read(inPacket);
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt64(credits);
            outPacket.PutVariableUInt64(shipworth);
            ship.Put(outPacket);
        }
    }

    class ClientPacket_UpdateSlotCount : IPacket
    {
        public int slot;
        public int count;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateSlotCount();
            _packet.slot = inPacket.GetVariableInt32();
            _packet.count = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(slot);
            outPacket.PutVariableInt32(count);
        }
    }

    class ClientPacket_DeleteSlot : IPacket
    {
        public int slot;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_DeleteSlot();
            _packet.slot = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(slot);
        }
    }

    class ClientPacket_SpawnSolar : IPacket
    {
        public SolarInfo[] solars;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnSolar();
            uint __len_solars = inPacket.GetVariableUInt32();
            if (__len_solars > 0) {
                _packet.solars = new SolarInfo[(int)(__len_solars - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.solars.Length; _ARRIDX++)
                    _packet.solars[_ARRIDX] = SolarInfo.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (solars != null) {
                outPacket.PutVariableUInt32((uint)(solars.Length + 1));
                foreach(var _element in solars)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_OnConsoleMessage : IPacket
    {
        public string text;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_OnConsoleMessage();
            _packet.text = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(text);
        }
    }

    class ClientPacket_SpawnDebris : IPacket
    {
        public int id;
        public GameObjectKind kind;
        public string archetype;
        public string part;
        public Vector3 position;
        public Quaternion orientation;
        public float mass;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnDebris();
            _packet.id = inPacket.GetVariableInt32();
            _packet.kind = (GameObjectKind)inPacket.GetVariableInt32();
            _packet.archetype = inPacket.GetString();
            _packet.part = inPacket.GetString();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            _packet.mass = inPacket.GetFloat();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.PutVariableInt32((int)kind);
            outPacket.Put(archetype);
            outPacket.Put(part);
            outPacket.Put(position);
            outPacket.Put(orientation);
            outPacket.Put(mass);
        }
    }

    class ClientPacket_SpawnMissile : IPacket
    {
        public int id;
        public bool playSound;
        public uint equip;
        public Vector3 position;
        public Quaternion orientation;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_SpawnMissile();
            _packet.id = inPacket.GetVariableInt32();
            _packet.playSound = inPacket.GetBool();
            _packet.equip = inPacket.GetUInt();
            _packet.position = inPacket.GetVector3();
            _packet.orientation = inPacket.GetQuaternion();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.Put(playSound);
            outPacket.Put(equip);
            outPacket.Put(position);
            outPacket.Put(orientation);
        }
    }

    class ClientPacket_DestroyMissile : IPacket
    {
        public int id;
        public bool explode;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_DestroyMissile();
            _packet.id = inPacket.GetVariableInt32();
            _packet.explode = inPacket.GetBool();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.Put(explode);
        }
    }

    class ClientPacket_BaseEnter : IPacket
    {
        public string _base;
        public int objective;
        public string[] rtcs;
        public NewsArticle[] news;
        public SoldGood[] goods;
        public NetSoldShip[] ships;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_BaseEnter();
            _packet._base = inPacket.GetString();
            _packet.objective = inPacket.GetVariableInt32();
            uint __len_rtcs = inPacket.GetVariableUInt32();
            if (__len_rtcs > 0) {
                _packet.rtcs = new string[(int)(__len_rtcs - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.rtcs.Length; _ARRIDX++)
                    _packet.rtcs[_ARRIDX] = inPacket.GetString();
            }
            uint __len_news = inPacket.GetVariableUInt32();
            if (__len_news > 0) {
                _packet.news = new NewsArticle[(int)(__len_news - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.news.Length; _ARRIDX++)
                    _packet.news[_ARRIDX] = NewsArticle.Read(inPacket);
            }
            uint __len_goods = inPacket.GetVariableUInt32();
            if (__len_goods > 0) {
                _packet.goods = new SoldGood[(int)(__len_goods - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.goods.Length; _ARRIDX++)
                    _packet.goods[_ARRIDX] = SoldGood.Read(inPacket);
            }
            uint __len_ships = inPacket.GetVariableUInt32();
            if (__len_ships > 0) {
                _packet.ships = new NetSoldShip[(int)(__len_ships - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.ships.Length; _ARRIDX++)
                    _packet.ships[_ARRIDX] = NetSoldShip.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(_base);
            outPacket.PutVariableInt32(objective);
            if (rtcs != null) {
                outPacket.PutVariableUInt32((uint)(rtcs.Length + 1));
                foreach(var _element in rtcs)
                    outPacket.Put(_element);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (news != null) {
                outPacket.PutVariableUInt32((uint)(news.Length + 1));
                foreach(var _element in news)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (goods != null) {
                outPacket.PutVariableUInt32((uint)(goods.Length + 1));
                foreach(var _element in goods)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
            if (ships != null) {
                outPacket.PutVariableUInt32((uint)(ships.Length + 1));
                foreach(var _element in ships)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_UpdateRTCs : IPacket
    {
        public string[] rtcs;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateRTCs();
            uint __len_rtcs = inPacket.GetVariableUInt32();
            if (__len_rtcs > 0) {
                _packet.rtcs = new string[(int)(__len_rtcs - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.rtcs.Length; _ARRIDX++)
                    _packet.rtcs[_ARRIDX] = inPacket.GetString();
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (rtcs != null) {
                outPacket.PutVariableUInt32((uint)(rtcs.Length + 1));
                foreach(var _element in rtcs)
                    outPacket.Put(_element);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_ObjectiveUpdate : IPacket
    {
        public int objective;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_ObjectiveUpdate();
            _packet.objective = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(objective);
        }
    }

    class ClientPacket_Killed : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_Killed();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_DespawnObject : IPacket
    {
        public int id;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_DespawnObject();
            _packet.id = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
        }
    }

    class ClientPacket_PlaySound : IPacket
    {
        public string sound;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_PlaySound();
            _packet.sound = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(sound);
        }
    }

    class ClientPacket_PlayMusic : IPacket
    {
        public string music;
        public float fade;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_PlayMusic();
            _packet.music = inPacket.GetString();
            _packet.fade = inPacket.GetFloat();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(music);
            outPacket.Put(fade);
        }
    }

    class ClientPacket_DestroyPart : IPacket
    {
        public byte idtype;
        public int id;
        public string part;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_DestroyPart();
            _packet.idtype = inPacket.GetByte();
            _packet.id = inPacket.GetVariableInt32();
            _packet.part = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(idtype);
            outPacket.PutVariableInt32(id);
            outPacket.Put(part);
        }
    }

    class ClientPacket_RunMissionDialog : IPacket
    {
        public NetDlgLine[] lines;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_RunMissionDialog();
            uint __len_lines = inPacket.GetVariableUInt32();
            if (__len_lines > 0) {
                _packet.lines = new NetDlgLine[(int)(__len_lines - 1)];
                for(int _ARRIDX = 0; _ARRIDX < _packet.lines.Length; _ARRIDX++)
                    _packet.lines[_ARRIDX] = NetDlgLine.Read(inPacket);
            }
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            if (lines != null) {
                outPacket.PutVariableUInt32((uint)(lines.Length + 1));
                foreach(var _element in lines)
                    _element.Put(outPacket);
            } else {
                outPacket.PutVariableUInt32(0);
            }
        }
    }

    class ClientPacket_StartJumpTunnel : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_StartJumpTunnel();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_StartTradelane : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_StartTradelane();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_TradelaneDisrupted : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_TradelaneDisrupted();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_EndTradelane : IPacket
    {
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_EndTradelane();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
        }
    }

    class ClientPacket_UpdateFormation : IPacket
    {
        public NetFormation formation;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_UpdateFormation();
            _packet.formation = NetFormation.Read(inPacket);
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            formation.Put(outPacket);
        }
    }

    class ClientPacket_TradelaneActivate : IPacket
    {
        public uint id;
        public bool left;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_TradelaneActivate();
            _packet.id = inPacket.GetUInt();
            _packet.left = inPacket.GetBool();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(id);
            outPacket.Put(left);
        }
    }

    class ClientPacket_TradelaneDeactivate : IPacket
    {
        public uint id;
        public bool left;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_TradelaneDeactivate();
            _packet.id = inPacket.GetUInt();
            _packet.left = inPacket.GetBool();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.Put(id);
            outPacket.Put(left);
        }
    }

    class ClientPacket_MarkImportant : IPacket
    {
        public int objId;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_MarkImportant();
            _packet.objId = inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(objId);
        }
    }

    class ClientPacket_ReceiveChatMessage : IPacket
    {
        public ChatCategory category;
        public string player;
        public string message;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_ReceiveChatMessage();
            _packet.category = (ChatCategory)inPacket.GetVariableInt32();
            _packet.player = inPacket.GetString();
            _packet.message = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32((int)category);
            outPacket.Put(player);
            outPacket.Put(message);
        }
    }

    class ClientPacket_PopupOpen : IPacket
    {
        public int title;
        public int contents;
        public string id;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_PopupOpen();
            _packet.title = inPacket.GetVariableInt32();
            _packet.contents = inPacket.GetVariableInt32();
            _packet.id = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(title);
            outPacket.PutVariableInt32(contents);
            outPacket.Put(id);
        }
    }

    class ClientPacket_OnPlayerJoin : IPacket
    {
        public int id;
        public string name;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_OnPlayerJoin();
            _packet.id = inPacket.GetVariableInt32();
            _packet.name = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.Put(name);
        }
    }

    class ClientPacket_OnPlayerLeave : IPacket
    {
        public int id;
        public string name;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ClientPacket_OnPlayerLeave();
            _packet.id = inPacket.GetVariableInt32();
            _packet.name = inPacket.GetString();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(id);
            outPacket.Put(name);
        }
    }

    class ResponsePacket_bool : IPacket
    {
        public int Sequence;
        public bool Value;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ResponsePacket_bool();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.Value = inPacket.GetBool();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.Put(Value);
        }
    }

    class ResponsePacket_ShipPackageInfo : IPacket
    {
        public int Sequence;
        public ShipPackageInfo Value;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ResponsePacket_ShipPackageInfo();
            _packet.Sequence = inPacket.GetVariableInt32();
            if(inPacket.GetByte() == 1) _packet.Value = ShipPackageInfo.Read(inPacket);
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            if (Value == null) outPacket.Put((byte)0);
            else {
                outPacket.Put((byte)1);
                Value.Put(outPacket);
            }
        }
    }

    class ResponsePacket_ShipPurchaseStatus : IPacket
    {
        public int Sequence;
        public ShipPurchaseStatus Value;
        public static object Read(PacketReader inPacket)
        {
            var _packet = new ResponsePacket_ShipPurchaseStatus();
            _packet.Sequence = inPacket.GetVariableInt32();
            _packet.Value = (ShipPurchaseStatus)inPacket.GetVariableInt32();
            return _packet;
        }
        public void WriteContents(PacketWriter outPacket)
        {
            outPacket.PutVariableInt32(Sequence);
            outPacket.PutVariableInt32((int)Value);
        }
    }
    public partial class NetResponseHandler
    {
        public TaskCompletionSource<bool> GetCompletionSource_bool(int sequence)
        {
            var src = new TaskCompletionSource<bool>();
            completionSources.Add(sequence, src);
            return src;
        }

        public TaskCompletionSource<ShipPackageInfo> GetCompletionSource_ShipPackageInfo(int sequence)
        {
            var src = new TaskCompletionSource<ShipPackageInfo>();
            completionSources.Add(sequence, src);
            return src;
        }

        public TaskCompletionSource<ShipPurchaseStatus> GetCompletionSource_ShipPurchaseStatus(int sequence)
        {
            var src = new TaskCompletionSource<ShipPurchaseStatus>();
            completionSources.Add(sequence, src);
            return src;
        }

        public bool HandlePacket(IPacket pkt)
        {
            switch (pkt)
            {
                case ResponsePacket_bool _1: {
                    if (completionSources.TryGetValue(_1.Sequence, out object k)) {
                        completionSources.Remove(_1.Sequence);
                        if (k is TaskCompletionSource<bool> i) i.SetResult(_1.Value);
                    }
                    return true;
                }
                case ResponsePacket_ShipPackageInfo _2: {
                    if (completionSources.TryGetValue(_2.Sequence, out object k)) {
                        completionSources.Remove(_2.Sequence);
                        if (k is TaskCompletionSource<ShipPackageInfo> i) i.SetResult(_2.Value);
                    }
                    return true;
                }
                case ResponsePacket_ShipPurchaseStatus _3: {
                    if (completionSources.TryGetValue(_3.Sequence, out object k)) {
                        completionSources.Remove(_3.Sequence);
                        if (k is TaskCompletionSource<ShipPurchaseStatus> i) i.SetResult(_3.Value);
                    }
                    return true;
                }
            }
            return false;
        }
    }
    static class GeneratedProtocol
    {
        public const string PROTOCOL_HASH = "L2QWQHow5cKgI62XiV31TA";
        public static void RegisterPackets()
        {
            Packets.Register<ResponsePacket_bool>(ResponsePacket_bool.Read);
            Packets.Register<ResponsePacket_ShipPackageInfo>(ResponsePacket_ShipPackageInfo.Read);
            Packets.Register<ResponsePacket_ShipPurchaseStatus>(ResponsePacket_ShipPurchaseStatus.Read);
            Packets.Register<ServerPacket_Launch>(ServerPacket_Launch.Read);
            Packets.Register<ServerPacket_RTCComplete>(ServerPacket_RTCComplete.Read);
            Packets.Register<ServerPacket_LineSpoken>(ServerPacket_LineSpoken.Read);
            Packets.Register<ServerPacket_OnLocationEnter>(ServerPacket_OnLocationEnter.Read);
            Packets.Register<ServerPacket_RequestCharacterDB>(ServerPacket_RequestCharacterDB.Read);
            Packets.Register<ServerPacket_SelectCharacter>(ServerPacket_SelectCharacter.Read);
            Packets.Register<ServerPacket_DeleteCharacter>(ServerPacket_DeleteCharacter.Read);
            Packets.Register<ServerPacket_CreateNewCharacter>(ServerPacket_CreateNewCharacter.Read);
            Packets.Register<ServerPacket_PurchaseGood>(ServerPacket_PurchaseGood.Read);
            Packets.Register<ServerPacket_SellGood>(ServerPacket_SellGood.Read);
            Packets.Register<ServerPacket_GetShipPackage>(ServerPacket_GetShipPackage.Read);
            Packets.Register<ServerPacket_PurchaseShip>(ServerPacket_PurchaseShip.Read);
            Packets.Register<ServerPacket_RequestDock>(ServerPacket_RequestDock.Read);
            Packets.Register<ServerPacket_FireProjectiles>(ServerPacket_FireProjectiles.Read);
            Packets.Register<ServerPacket_FireMissiles>(ServerPacket_FireMissiles.Read);
            Packets.Register<ServerPacket_Unmount>(ServerPacket_Unmount.Read);
            Packets.Register<ServerPacket_Mount>(ServerPacket_Mount.Read);
            Packets.Register<ServerPacket_ClosedPopup>(ServerPacket_ClosedPopup.Read);
            Packets.Register<ServerPacket_StoryNPCSelect>(ServerPacket_StoryNPCSelect.Read);
            Packets.Register<ServerPacket_RTCMissionAccepted>(ServerPacket_RTCMissionAccepted.Read);
            Packets.Register<ServerPacket_RTCMissionRejected>(ServerPacket_RTCMissionRejected.Read);
            Packets.Register<ServerPacket_Respawn>(ServerPacket_Respawn.Read);
            Packets.Register<ServerPacket_ChatMessage>(ServerPacket_ChatMessage.Read);
            Packets.Register<ServerPacket_EnterFormation>(ServerPacket_EnterFormation.Read);
            Packets.Register<ServerPacket_LeaveFormation>(ServerPacket_LeaveFormation.Read);
            Packets.Register<ClientPacket_UpdateBaselinePrices>(ClientPacket_UpdateBaselinePrices.Read);
            Packets.Register<ClientPacket_CallThorn>(ClientPacket_CallThorn.Read);
            Packets.Register<ClientPacket_SpawnObject>(ClientPacket_SpawnObject.Read);
            Packets.Register<ClientPacket_SpawnPlayer>(ClientPacket_SpawnPlayer.Read);
            Packets.Register<ClientPacket_UpdateEffects>(ClientPacket_UpdateEffects.Read);
            Packets.Register<ClientPacket_SpawnProjectiles>(ClientPacket_SpawnProjectiles.Read);
            Packets.Register<ClientPacket_UpdateAnimations>(ClientPacket_UpdateAnimations.Read);
            Packets.Register<ClientPacket_UpdateReputations>(ClientPacket_UpdateReputations.Read);
            Packets.Register<ClientPacket_UpdateInventory>(ClientPacket_UpdateInventory.Read);
            Packets.Register<ClientPacket_UpdateSlotCount>(ClientPacket_UpdateSlotCount.Read);
            Packets.Register<ClientPacket_DeleteSlot>(ClientPacket_DeleteSlot.Read);
            Packets.Register<ClientPacket_SpawnSolar>(ClientPacket_SpawnSolar.Read);
            Packets.Register<ClientPacket_OnConsoleMessage>(ClientPacket_OnConsoleMessage.Read);
            Packets.Register<ClientPacket_SpawnDebris>(ClientPacket_SpawnDebris.Read);
            Packets.Register<ClientPacket_SpawnMissile>(ClientPacket_SpawnMissile.Read);
            Packets.Register<ClientPacket_DestroyMissile>(ClientPacket_DestroyMissile.Read);
            Packets.Register<ClientPacket_BaseEnter>(ClientPacket_BaseEnter.Read);
            Packets.Register<ClientPacket_UpdateRTCs>(ClientPacket_UpdateRTCs.Read);
            Packets.Register<ClientPacket_ObjectiveUpdate>(ClientPacket_ObjectiveUpdate.Read);
            Packets.Register<ClientPacket_Killed>(ClientPacket_Killed.Read);
            Packets.Register<ClientPacket_DespawnObject>(ClientPacket_DespawnObject.Read);
            Packets.Register<ClientPacket_PlaySound>(ClientPacket_PlaySound.Read);
            Packets.Register<ClientPacket_PlayMusic>(ClientPacket_PlayMusic.Read);
            Packets.Register<ClientPacket_DestroyPart>(ClientPacket_DestroyPart.Read);
            Packets.Register<ClientPacket_RunMissionDialog>(ClientPacket_RunMissionDialog.Read);
            Packets.Register<ClientPacket_StartJumpTunnel>(ClientPacket_StartJumpTunnel.Read);
            Packets.Register<ClientPacket_StartTradelane>(ClientPacket_StartTradelane.Read);
            Packets.Register<ClientPacket_TradelaneDisrupted>(ClientPacket_TradelaneDisrupted.Read);
            Packets.Register<ClientPacket_EndTradelane>(ClientPacket_EndTradelane.Read);
            Packets.Register<ClientPacket_UpdateFormation>(ClientPacket_UpdateFormation.Read);
            Packets.Register<ClientPacket_TradelaneActivate>(ClientPacket_TradelaneActivate.Read);
            Packets.Register<ClientPacket_TradelaneDeactivate>(ClientPacket_TradelaneDeactivate.Read);
            Packets.Register<ClientPacket_MarkImportant>(ClientPacket_MarkImportant.Read);
            Packets.Register<ClientPacket_ReceiveChatMessage>(ClientPacket_ReceiveChatMessage.Read);
            Packets.Register<ClientPacket_PopupOpen>(ClientPacket_PopupOpen.Read);
            Packets.Register<ClientPacket_OnPlayerJoin>(ClientPacket_OnPlayerJoin.Read);
            Packets.Register<ClientPacket_OnPlayerLeave>(ClientPacket_OnPlayerLeave.Read);
        }

        public static async Task<bool> HandleServerPacket(IPacket pkt, IServerPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ServerPacket_Launch _1: {
                    player.Launch();
                    return true;
                }
                case ServerPacket_RTCComplete _2: {
                    player.RTCComplete(_2.rtc);
                    return true;
                }
                case ServerPacket_LineSpoken _3: {
                    player.LineSpoken(_3.hash);
                    return true;
                }
                case ServerPacket_OnLocationEnter _4: {
                    player.OnLocationEnter(_4._base,_4.room);
                    return true;
                }
                case ServerPacket_RequestCharacterDB _5: {
                    player.RequestCharacterDB();
                    return true;
                }
                case ServerPacket_SelectCharacter _6: {
                    var retval = await player.SelectCharacter(_6.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _6.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_DeleteCharacter _7: {
                    var retval = await player.DeleteCharacter(_7.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _7.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_CreateNewCharacter _8: {
                    var retval = await player.CreateNewCharacter(_8.name,_8.index);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _8.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_PurchaseGood _9: {
                    var retval = await player.PurchaseGood(_9.item,_9.count);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _9.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_SellGood _10: {
                    var retval = await player.SellGood(_10.id,_10.count);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _10.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_GetShipPackage _11: {
                    var retval = await player.GetShipPackage(_11.package);
                    res.SendResponse(new ResponsePacket_ShipPackageInfo() { Sequence = _11.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_PurchaseShip _12: {
                    var retval = await player.PurchaseShip(_12.package,_12.mountedPlayer,_12.mountedPackage,_12.sellPlayer,_12.sellPackage);
                    res.SendResponse(new ResponsePacket_ShipPurchaseStatus() { Sequence = _12.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_RequestDock _13: {
                    player.RequestDock(_13.nickname);
                    return true;
                }
                case ServerPacket_FireProjectiles _14: {
                    player.FireProjectiles(_14.projectiles);
                    return true;
                }
                case ServerPacket_FireMissiles _15: {
                    player.FireMissiles(_15.missiles);
                    return true;
                }
                case ServerPacket_Unmount _16: {
                    var retval = await player.Unmount(_16.hardpoint);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _16.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_Mount _17: {
                    var retval = await player.Mount(_17.id);
                    res.SendResponse(new ResponsePacket_bool() { Sequence = _17.Sequence, Value = retval });
                    return true;
                }
                case ServerPacket_ClosedPopup _18: {
                    player.ClosedPopup(_18.id);
                    return true;
                }
                case ServerPacket_StoryNPCSelect _19: {
                    player.StoryNPCSelect(_19.name,_19.room,_19._base);
                    return true;
                }
                case ServerPacket_RTCMissionAccepted _20: {
                    player.RTCMissionAccepted();
                    return true;
                }
                case ServerPacket_RTCMissionRejected _21: {
                    player.RTCMissionRejected();
                    return true;
                }
                case ServerPacket_Respawn _22: {
                    player.Respawn();
                    return true;
                }
                case ServerPacket_ChatMessage _23: {
                    player.ChatMessage(_23.category,_23.message);
                    return true;
                }
                case ServerPacket_EnterFormation _24: {
                    player.EnterFormation(_24.ship);
                    return true;
                }
                case ServerPacket_LeaveFormation _25: {
                    player.LeaveFormation();
                    return true;
                }
            }
            return false;
        }

        public static async Task<bool> HandleClientPacket(IPacket pkt, IClientPlayer player, INetResponder res)
        {
            switch (pkt)
            {
                case ClientPacket_UpdateBaselinePrices _1: {
                    player.UpdateBaselinePrices(_1.prices);
                    return true;
                }
                case ClientPacket_CallThorn _2: {
                    player.CallThorn(_2.script,_2.mainObject);
                    return true;
                }
                case ClientPacket_SpawnObject _3: {
                    player.SpawnObject(_3.id,_3.name,_3.affiliation,_3.position,_3.orientation,_3.loadout);
                    return true;
                }
                case ClientPacket_SpawnPlayer _4: {
                    player.SpawnPlayer(_4.system,_4.objective,_4.position,_4.orientation);
                    return true;
                }
                case ClientPacket_UpdateEffects _5: {
                    player.UpdateEffects(_5.id,_5.effects);
                    return true;
                }
                case ClientPacket_SpawnProjectiles _6: {
                    player.SpawnProjectiles(_6.projectiles);
                    return true;
                }
                case ClientPacket_UpdateAnimations _7: {
                    player.UpdateAnimations(_7.systemObject,_7.id,_7.animations);
                    return true;
                }
                case ClientPacket_UpdateReputations _8: {
                    player.UpdateReputations(_8.reps);
                    return true;
                }
                case ClientPacket_UpdateInventory _9: {
                    player.UpdateInventory(_9.credits,_9.shipworth,_9.ship);
                    return true;
                }
                case ClientPacket_UpdateSlotCount _10: {
                    player.UpdateSlotCount(_10.slot,_10.count);
                    return true;
                }
                case ClientPacket_DeleteSlot _11: {
                    player.DeleteSlot(_11.slot);
                    return true;
                }
                case ClientPacket_SpawnSolar _12: {
                    player.SpawnSolar(_12.solars);
                    return true;
                }
                case ClientPacket_OnConsoleMessage _13: {
                    player.OnConsoleMessage(_13.text);
                    return true;
                }
                case ClientPacket_SpawnDebris _14: {
                    player.SpawnDebris(_14.id,_14.kind,_14.archetype,_14.part,_14.position,_14.orientation,_14.mass);
                    return true;
                }
                case ClientPacket_SpawnMissile _15: {
                    player.SpawnMissile(_15.id,_15.playSound,_15.equip,_15.position,_15.orientation);
                    return true;
                }
                case ClientPacket_DestroyMissile _16: {
                    player.DestroyMissile(_16.id,_16.explode);
                    return true;
                }
                case ClientPacket_BaseEnter _17: {
                    player.BaseEnter(_17._base,_17.objective,_17.rtcs,_17.news,_17.goods,_17.ships);
                    return true;
                }
                case ClientPacket_UpdateRTCs _18: {
                    player.UpdateRTCs(_18.rtcs);
                    return true;
                }
                case ClientPacket_ObjectiveUpdate _19: {
                    player.ObjectiveUpdate(_19.objective);
                    return true;
                }
                case ClientPacket_Killed _20: {
                    player.Killed();
                    return true;
                }
                case ClientPacket_DespawnObject _21: {
                    player.DespawnObject(_21.id);
                    return true;
                }
                case ClientPacket_PlaySound _22: {
                    player.PlaySound(_22.sound);
                    return true;
                }
                case ClientPacket_PlayMusic _23: {
                    player.PlayMusic(_23.music,_23.fade);
                    return true;
                }
                case ClientPacket_DestroyPart _24: {
                    player.DestroyPart(_24.idtype,_24.id,_24.part);
                    return true;
                }
                case ClientPacket_RunMissionDialog _25: {
                    player.RunMissionDialog(_25.lines);
                    return true;
                }
                case ClientPacket_StartJumpTunnel _26: {
                    player.StartJumpTunnel();
                    return true;
                }
                case ClientPacket_StartTradelane _27: {
                    player.StartTradelane();
                    return true;
                }
                case ClientPacket_TradelaneDisrupted _28: {
                    player.TradelaneDisrupted();
                    return true;
                }
                case ClientPacket_EndTradelane _29: {
                    player.EndTradelane();
                    return true;
                }
                case ClientPacket_UpdateFormation _30: {
                    player.UpdateFormation(_30.formation);
                    return true;
                }
                case ClientPacket_TradelaneActivate _31: {
                    player.TradelaneActivate(_31.id,_31.left);
                    return true;
                }
                case ClientPacket_TradelaneDeactivate _32: {
                    player.TradelaneDeactivate(_32.id,_32.left);
                    return true;
                }
                case ClientPacket_MarkImportant _33: {
                    player.MarkImportant(_33.objId);
                    return true;
                }
                case ClientPacket_ReceiveChatMessage _34: {
                    player.ReceiveChatMessage(_34.category,_34.player,_34.message);
                    return true;
                }
                case ClientPacket_PopupOpen _35: {
                    player.PopupOpen(_35.title,_35.contents,_35.id);
                    return true;
                }
                case ClientPacket_OnPlayerJoin _36: {
                    player.OnPlayerJoin(_36.id,_36.name);
                    return true;
                }
                case ClientPacket_OnPlayerLeave _37: {
                    player.OnPlayerLeave(_37.id,_37.name);
                    return true;
                }
            }
            return false;
        }

    }
}
